# Pre-commit Configuration
# Enforces code quality, style, and documentation standards
# Run: pre-commit install (after pip install pre-commit)

repos:
  # Built-in hooks for basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        exclude: ^migrations/
      - id: end-of-file-fixer
        exclude: ^migrations/
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: requirements-txt-fixer

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black", "--filter-files"]
        exclude: ^migrations/

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3
        exclude: ^migrations/

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        exclude: ^migrations/
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # Python type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.1
    hooks:
      - id: mypy
        exclude: ^(migrations/|tests/)
        additional_dependencies:
          - types-requests
          - types-redis
          - types-setuptools
        args: ["--ignore-missing-imports"]

  # Security linting
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "app/", "-f", "json", "-o", "bandit-report.json"]
        exclude: ^(tests/|migrations/)

  # Docstring coverage check
  - repo: https://github.com/econchick/interrogate
    rev: 1.5.0
    hooks:
      - id: interrogate
        args: ["-vv", "--fail-under=90", "--ignore-init-method", "--ignore-magic"]
        exclude: ^(tests/|migrations/|scripts/)

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: ["-d", "relaxed"]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        args: ["--fix"]
        exclude: ^(CHANGELOG.md|migrations/)

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck
        files: \.(sh|bash)$

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        files: Dockerfile.*

  # SQL formatting (if using raw SQL files)
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.2
    hooks:
      - id: sqlfluff-lint
        files: \.sql$
        exclude: ^migrations/
      - id: sqlfluff-fix
        files: \.sql$
        exclude: ^migrations/

  # Local hooks for custom checks
  - repo: local
    hooks:
      # Check for required files in blueprints
      - id: blueprint-structure-check
        name: Blueprint Structure Check
        entry: python scripts/check_blueprint_structure.py
        language: python
        files: ^app/blueprints/
        pass_filenames: false
        
      # Check URL prefix consistency
      - id: url-prefix-check
        name: URL Prefix Consistency Check
        entry: python scripts/check_url_prefixes.py
        language: python
        files: ^app/(blueprints/.*routes\.py|urls\.py)$
        pass_filenames: false
        
      # Check docstring coverage
      - id: docstring-coverage
        name: Docstring Coverage Check
        entry: docstring-coverage
        language: python
        args: ["app/", "--fail-under=90"]
        pass_filenames: false
        additional_dependencies: [docstring-coverage]
        
      # Check for TODO/FIXME comments in production code
      - id: no-todos-in-main
        name: No TODOs in main branch
        entry: bash -c 'if git branch --show-current | grep -q "^(main|master)$"; then grep -r "TODO\|FIXME\|XXX" app/ && exit 1 || exit 0; else exit 0; fi'
        language: system
        pass_filenames: false
        
      # Ensure all Python files have proper encoding declaration
      - id: python-encoding-pragma
        name: Python encoding pragma
        entry: python scripts/check_encoding.py
        language: python
        files: \.py$
        exclude: ^(migrations/|__pycache__/)

# Global configuration
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false