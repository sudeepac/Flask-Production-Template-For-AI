[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flask-ml-app"
version = "0.1.0"
description = "Flask + ML Project with Consistent Architecture"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Framework :: Flask",
]
dependencies = [
    "Flask>=2.3.0",
    "Flask-SQLAlchemy>=3.0.0",
    "Flask-Migrate>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-flask>=1.2.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/flask-ml-app"
Repository = "https://github.com/yourusername/flask-ml-app.git"
Issues = "https://github.com/yourusername/flask-ml-app/issues"

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
^/migrations/  # exclude migration files
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["migrations/*"]
known_first_party = ["app"]
known_third_party = [
    "flask",
    "sqlalchemy",
    "marshmallow",
    "pydantic",
    "numpy",
    "pandas",
    "sklearn",
    "pytest",
]

# Flake8 Configuration
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "migrations",
    "build",
    "dist",
]
per-file-ignores = [
    "__init__.py:F401",  # allow unused imports in __init__.py
    "tests/*:S101",      # allow assert statements in tests
]

# MyPy Configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "flask_sqlalchemy.*",
    "flask_migrate.*",
    "flask_jwt_extended.*",
    "flask_caching.*",
    "flask_cors.*",
    "flask_limiter.*",
    "sklearn.*",
    "joblib.*",
    "redis.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ml: marks tests as ML model tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == \\.__main__\\.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Docstring Coverage Configuration
[tool.docstring-coverage]
verbose = 2
missing-only = true
skip-magic = true
skip-file-docstring = false
skip-init = false
skip-class-def = false
fail-under = 90
exclude = [
    "migrations/*",
    "tests/*",
    "*/__pycache__/*",
]

# Naming Conventions (enforced by linters)
[tool.naming]
# File naming: snake_case
# Class naming: PascalCase
# Function/method naming: snake_case
# Variable naming: snake_case
# Constant naming: UPPER_SNAKE_CASE
# Blueprint naming: snake_case
# URL prefix naming: kebab-case
