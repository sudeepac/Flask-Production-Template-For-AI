[tool:pytest]
# Pytest configuration file

# Test discovery
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 6.0

# Add current directory to Python path and configure test options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5
    -m "not slow and not performance"

# Test markers
markers =
    unit: Unit tests - test individual functions and classes
    integration: Integration tests - test component interactions
    api: API tests - test HTTP endpoints and responses
    ml: Machine learning tests - test ML models and data processing
    performance: Performance tests - test speed and resource usage
    slow: Slow running tests - tests that take more than 1 second
    database: Database tests - tests that require database access
    cache: Cache tests - tests that require cache functionality
    auth: Authentication tests - tests that require authentication
    external: External service tests - tests that call external APIs
    smoke: Smoke tests - basic functionality tests for CI/CD

# Test output
console_output_style = progress
junit_family = xunit2

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = app
omit =
    */venv/*
    */env/*
    */tests/*
    */migrations/*
    */instance/*
    */config.py
    */__pycache__/*
    */.*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
