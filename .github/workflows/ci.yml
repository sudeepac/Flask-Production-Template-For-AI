name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort bandit safety mypy

      - name: Code formatting check (Black)
        run: |
          black --check --diff app tests
          if [ $? -ne 0 ]; then
            echo "❌ Code formatting check failed. Run 'make fix-format' to fix."
            exit 1
          fi

      - name: Import sorting check (isort)
        run: |
          isort --check-only --diff app tests
          if [ $? -ne 0 ]; then
            echo "❌ Import sorting check failed. Run 'make fix-imports' to fix."
            exit 1
          fi

      - name: Linting (flake8)
        run: |
          flake8 app tests --max-line-length=88 --extend-ignore=E203,W503 --statistics
          if [ $? -ne 0 ]; then
            echo "❌ Linting check failed. Fix the issues above."
            exit 1
          fi

      - name: Type checking (mypy)
        run: |
          mypy app --ignore-missing-imports --strict-optional
          if [ $? -ne 0 ]; then
            echo "❌ Type checking failed. Add proper type hints."
            exit 1
          fi

      - name: Security check (bandit)
        run: |
          bandit -r app -f json -o bandit-report.json
          bandit -r app -f txt
          if [ $? -eq 1 ]; then
            echo "❌ Security vulnerabilities found. Check bandit-report.json"
            exit 1
          fi

      - name: Dependency security check (safety)
        run: |
          safety check --json --output safety-report.json
          safety check
          if [ $? -ne 0 ]; then
            echo "❌ Vulnerable dependencies found. Update dependencies."
            exit 1
          fi

      - name: Docstring coverage check
        run: |
          docstring-coverage app --fail-under=90
          if [ $? -ne 0 ]; then
            echo "❌ Docstring coverage below 90%. Add missing docstrings."
            exit 1
          fi

      - name: Custom style compliance check
        run: |
          python scripts/check_style_compliance.py
          if [ $? -ne 0 ]; then
            echo "❌ Style compliance check failed. Fix the issues above."
            exit 1
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Quality Gate - Prevents proceeding if code quality fails
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: always()
    steps:
      - name: Check code quality status
        run: |
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "❌ Code quality checks failed. Cannot proceed with testing."
            echo "Please fix all code quality issues before merging."
            exit 1
          fi
          echo "✅ All code quality checks passed. Proceeding with tests."

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [quality-gate]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-mock

      - name: Set up test environment
        run: |
          export FLASK_ENV=testing
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db
          export REDIS_URL=redis://localhost:6379/0

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: Run API tests
        run: |
          pytest tests/api/ -v --cov=app --cov-append --cov-report=xml
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  # Deployment Gate - Ensures all checks pass before deployment
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test, performance, docker]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'release')
    steps:
      - name: Check all required jobs status
        run: |
          echo "Checking status of all required jobs..."

          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Test suite failed"
            exit 1
          fi

          if [ "${{ needs.performance.result }}" != "success" ] && [ "${{ needs.performance.result }}" != "skipped" ]; then
            echo "❌ Performance tests failed"
            exit 1
          fi

          if [ "${{ needs.docker.result }}" != "success" ]; then
            echo "❌ Docker build and test failed"
            exit 1
          fi

          echo "✅ All required checks passed. Deployment is authorized."
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark psutil

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-json=benchmark.json
        env:
          FLASK_ENV: testing

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: benchmark.json

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          tags: flask-production-template:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name flask-production-template-test -p 5000:5000 flask-production-template:test
          sleep 10
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/examples/ || exit 1
          docker stop flask-production-template-test

      - name: Run security scan on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'flask-production-template:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Production Image
  build-and-push:
    name: Build & Push Production Image
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke tests for staging environment
          # Example: pytest tests/ -m smoke --base-url=$STAGING_URL

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: kubectl apply -f k8s/production/
          # Example: docker-compose -f docker-compose.prod.yml up -d

      - name: Run production smoke tests
        run: |
          echo "Running smoke tests on production..."
          # Add smoke tests for production environment

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"
          # Add notification logic (Slack, email, etc.)

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Clean up old images
        run: |
          echo "Cleaning up old container images..."
          # Add cleanup logic for old images

      - name: Clean up artifacts
        run: |
          echo "Cleaning up old artifacts..."
          # Add cleanup logic for old artifacts
